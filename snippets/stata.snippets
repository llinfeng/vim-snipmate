# Project Roots.
snippet NODA_h
	capture log close
	global pwd \`"C:/NODA/Stata"'
	global dta "$pwd/data"
	global dta_raw "$pwd/data/Raw"
	global do_dir "$pwd/program"
	global log "$pwd/log"
	global sj_files "$pwd/../tex/sj_files"
	global Tex "$pwd/../tex"
	global texdoc "$pwd/../tex/texdoc"
	capture eststo clear
	global simulation "$dta/simulation"
	global simulation_safe "$dta/simulation_safe"
	global test_dir "$dta/test"

snippet ArcGIS
	clear all
	capture eststo clear
	capture log close
	global root_dir \`"C:/arcgis"'
	global pwd \`"$root_dir/Stata"'
	global dta \`"$root_dir/Stata/Data"'
	global excel "c:/ArcGIS/ArcGIS/ExcelSoruces"
	global result "$pwd/../ArcGIS/Excel_Result"
	global sj_files "$root_dir/Tex/sj_files"
	global do_dir "$pwd/Program"
	capture mkdir $sj_files
	cd $sj_files
	global OptimizationOutput "$pwd/../ArcGIS/Result"
	global Sets "Newark OutOfNJ NJ_Rest"
	cd $OptimizationOutput
	* c:/arcgis/Log.wiki

snippet Sam
	clear all
	capture eststo clear
	capture log close
	global Root "C:/Sam"
	global dta "$Root/Stata/Data"
	global sj_files "$Root/Tex/sj_files"
	global do_dir "$Root/Stata/Program"
	global origin "$Root/OriginalData"
	global excel "$Root/Excel"

snippet Sonja
	clear all
	capture eststo clear
	capture log close
	global root_dir \`"C:/Sonja"'
	global pwd \`"$root_dir/Stata"'
	global dta \`"$root_dir/Stata/Data"'
	global sj_files "$root_dir/Tex/sj_files"
	global do_dir "$pwd/Program"
	global origin "$root_dir/OriginalData"
	global log "$root_dir/log"

snippet NYSJT
	clear all
	capture eststo clear
	capture log close
	global root_dir \`"C:/NY_SJT"'
	global dta \`"$root_dir/Stata/Data"'
	global sj_files "$root_dir/Tex/sj_files"
	global do_dir "$root_dir/Stata/Program"
	global excel "$root_dir/excel"
	capture mkdir $sj_files
	cd $sj_files

snippet Margo
	clear all
	capture eststo clear
	capture log close
	global root_dir \`"C:/Margo/AO_data"'
	global dta \`"$root_dir/Stata/Data"'
	global origin "$root_dir/OriginalData"
	global sj_files "$root_dir/Tex/sj_files"
	global do_dir "$root_dir/Stata/Program"
	global log "$root_dir/log"

snippet Project
	capture log close
	global pwd \`"C:/${1:Project-Name}/Stata"'
	global dta "$pwd/data"
	global dta_raw "$pwd/data/Raw"
	global do_dir "$pwd/program"
	global log "$pwd/log"
	global sj_files "$pwd/../tex/sj_files"
	global Tex "$pwd/../tex"
	capture eststo clear

snippet mkdir
	global Root "${1:Root_Directory}"
	mkdir $Root/Stata
	mkdir $Root/Tex
	global dta "$Root/Stata/Data"
	global sj_files "$Root/Tex/sj_files"
	global do_dir "$Root/Stata/Program"
	global origin "$Root/OriginalData"
	mkdir $dta
	mkdir $sj_files
	mkdir $do_dir
	mkdir $Root/Reference
	mkdir $origin

# Avoid the fucking typos!	
snippet Dfdn
	/$Dfdn_traits

# For loops
snippet forglobal
	foreach ${1:element} in /$${2:set} {
		${3:do something}
	}

# posting data to external files
snippet post
	postfile ${1:post_name} 
	${2:column-title, the table in mind} 
	using /$${3:dir}, replace
	postclose $1
# Regression over defendant traits
snippet RegFree
	do $do_dir/00_Dfdn_traits_global.do
	eststo: qui areg ${1:LHS} /$${2:Dfdn_traits}, absorb(${3:FE}) cluster(${4:clustering_variable}) 
	foreach j of varlist /$$2 {
		disp "\`j'"
		eststo: qui  areg $1  \`j', absorb($3) cluster($4) 
	}
	esttab using /$Tex/${5:FileName}.tex, replace se
	eststo clear


snippet RegfJudge
	eststo: qui xi: areg JudgeHarsh $Dfdn_traits_full i.case_class, absorb(allotment_date) cluster(${2:judge_code})
	foreach j of varlist $Dfdn_traits_full {
		disp "\`j'"
		eststo: qui xi: areg JudgeHarsh \`j' i.case_class, absorb(allotment_date) cluster($2)
	}
	esttab using /$Tex/${1:name}_full.tex, replace se drop(_I*)
	eststo clear
	
snippet RegiJudge
	do $do_dir/00_Dfdn_traits_global.do
	eststo: qui xi: areg JudgeHarsh $Dfdn_traits_important i.case_class, absorb(allotment_date) cluster(${2:judge_code}) 
	foreach j of varlist $Dfdn_traits_important {
		disp "\`j'"
		eststo: qui xi: areg JudgeHarsh \`j' i.case_class, absorb(allotment_date) cluster($2)
	}
	esttab using /$Tex/${1:name}_important.tex, replace se drop(_I*)
	eststo clear

snippet RegiScreeningADA
	do $do_dir/00_Dfdn_traits_global.do
	eststo: qui xi: areg ScreenHarsh $Dfdn_traits_important, absorb(allotment_date) cluster(ada_code)
	foreach j of varlist $Dfdn_traits_important {
		disp "\`j'"
		eststo: qui xi: areg ScreenHarsh \`j', absorb(allotment_date) cluster(ada_code)
	}
	esttab using /$Tex/${1:name}_important.tex, replace se
	eststo clear

snippet RegfScreeningADA
	do $do_dir/00_Dfdn_traits_global.do
	eststo: qui xi: areg ScreenHarsh $Dfdn_traits_full, absorb(allotment_date) cluster(ada_code)
	foreach j of varlist $Dfdn_traits_full {
		disp "\`j'"
		eststo: qui xi: areg ScreenHarsh \`j', absorb(allotment_date) cluster(ada_code)
	}
	esttab using /$Tex/${1:name}_full.tex, replace se
	eststo clear

# Debugging
snippet debug
	set matsize 11000
	set trace on
	set traceexpand 	on
	set tracesep 	on
	set traceindent 	on
	set tracenumber 	off
	set tracehilite 	"" 

snippet testing
	set matsize 11000
	set trace on
	set traceexpand 	on
	set tracesep 	on
	set traceindent 	on
	set tracenumber 	off
	set tracehilite 	"" 
	
snippet cap
	capture drop ${1:var_name}

# texdoc 
snippet texlog
	texdoc stlog
	${1}
	texdoc stlog close

# graphing in texdoc
snippet graph
	graph export plot${1:1}.eps
	tex /includegraphics{plot$1}
# texdoc init
snippet texi
	texdoc init ${1:file_name}, replace
	${2}

	texdoc close
# texdoc full new file
snippet texnew
	texdoc init stata_report, replace
	tex /documentclass{article}
	tex /setcounter{tocdepth}{4}
	tex /usepackage{setspace}
	tex /usepackage{amssymb,amsmath,amsthm,mathrsfs,verbatim}
	tex 
	tex /usepackage[margin=.8cm]{geometry}
	tex /singlespacing
	tex /usepackage{multicol}
	tex /usepackage{xcolor}
	tex /usepackage{newverbs}
	tex /usepackage{pdfpages} %merge pdf with: /includepdfmerge{heine-borel_proof.pdf,-}
	tex 
	tex /usepackage{graphicx, hyperref}
	tex /setcounter{secnumdepth}{6}
	tex 
	tex /newverbcommand{/bverb}
	tex {/begin{lrbox}{/verbbox}}
	tex {/end{lrbox}/colorbox{yellow!30}{/box/verbbox}}
	tex /newverbcommand{/yverb}
	tex {/begin{lrbox}{/verbbox}}
	tex {/end{lrbox}/colorbox{yellow!30}{/box/verbbox}}
	tex /newverbcommand{/gverb}
	tex {/begin{lrbox}{/verbbox}}
	tex {/end{lrbox}/colorbox{green!30}{/box/verbbox}}
	tex /newverbcommand{/rverb}
	tex {/begin{lrbox}{/verbbox}}
	tex {/end{lrbox}/colorbox{red!30}{/box/verbbox}}
	tex 
	tex /newverbcommand{/grayverb}
	tex {/begin{lrbox}{/verbbox}}
	tex {/end{lrbox}/colorbox{gray!30}{/box/verbbox}}
	tex /usepackage{epstopdf}
	tex /usepackage{longtable}
	tex                                 %/usepackage{rotating}, then through environment: sidewaystable
	tex                                 %/usepackage{pdflscape} % Followed by landscape
	tex /usepackage{adjustbox}
	tex 
	tex /usepackage{mdframed}%needed for box like theorems./newmdtheoremenv %In the box, the footnotes are more handy! ^.^
	tex 
	tex /newtheorem{theorem}{Theorem}[paragraph]
	tex /newmdtheoremenv{remark}[theorem]{Remark}
	tex /newmdtheoremenv{question}[theorem]{Question}
	tex 
	tex /usepackage{tikz}
	tex /usetikzlibrary{shapes.geometric, arrows}
	tex /tikzstyle{case} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black, fill=red!30]
	tex /tikzstyle{section} = [rectangle, minimum width=3cm, minimum height=1cm, text centered, text width=3cm, draw=black, fill=orange!30] 
	tex /tikzstyle{arrow} = [thick,->,>=stealth]
	tex 
	tex 
	tex /let/origthebibliography/thebibliography
	tex /let/origendthebibliography/endthebibliography
	tex /newif/ifemptybibliography
	tex /renewenvironment{thebibliography}[1]
	tex {/if/relax/detokenize{#1}/relax/emptybibliographytrue/else/origthebibliography{#1}/fi}
	tex {/ifemptybibliography/else/origendthebibliography/fi}
	tex 
	tex /usepackage{stata}
	tex /usepackage{subcaption}
	tex /usepackage{graphicx}
	tex /usepackage{caption}
	tex /usepackage{pdflscape}
	tex 
	tex /newcommand{/xia}{/underline{ }/underline{ }}
	tex /usepackage[framed,numbered,autolinebreaks,useliterate]{mcode} % For displaying matlab code in latex.
	tex /title{${1:Report-Name}}
	tex /author{Linfeng Li}
	tex /begin{document}
	tex /maketitle
	tex /tableofcontents
	tex /section{${2:First-Section}}
	tex /end{document}
	texdoc close
	
	


# texsave, for printing spreadsheets to tex tables.
snippet texsave
	texsave _all using "${1:table_name}", title("${2:caption/title}") footnote("${3:note that}") replace frag

# create dummy
snippet dummy 
	gen ${1:DummyName} = 0
	replace $1 = 1 if ${2:CategoricalVarible} == "${3:choice_of_1_group}"

# time-date convert
snippet gen_date
	gen double ${1:new_numerical} = date(${2:old_var_string}, "${3:YMD}")

# date_from_string
snippet gen_string_date
	rename ${1:old_string} $1_string
	tostring $1_string, replace
	gen double $1 = date($1_string, ${2:YMD})

# use dataset
snippet use
	use $dta/${1:filename}, clear

snippet use_raw
	use $dta_raw/${1:filename}-cln.dta, clear

#Labeling variables
snippet label
	label values ${1:var_name} ${2:label_name}

snippet yes
	label values ${1:var_name} yes_no

# Posting tabulated results
snippet tabtwoway
	tab ${1:var1} ${2:var2}, matcell(${3:filename})
		matrix rownames $3 = 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014
		matrix colnames $3 = 
	putexcel A1=matrix($3, names) using $3, replace

snippet logouttab
	* Defining the operator/specific name to to be called later.
	preserve
	logout, clear: tab ${2:rowname} ${1:colname}
	logout, save(freq_$1) clear excel replace
	restore
	preserve
	logout, clear: tab $2 $1, nofreq row 
	logout, save(percentage_$1) clear excel replace
	restore
# do a .do file (files names to be coppied from TC, ysing "y").
snippet do
	do $do_dir/$1
# global declaration
snippet global
	global ${1:g_name} "${2:content}"

# duplicates
snippet dd
	duplicates drop ${1:id}, force
snippet dup_drop
	duplicates drop ${1:id}, force
snippet dr
	duplicates report ${1:id}
snippet dt
	duplicates tag ${1:id}, gen(dup_id)
# save dataset
snippet save 
	save $dta/${1:filename}.dta, replace
# save tempfile
snippet tempfile
	tempfile ${1:TempFileName}
	save \`$1', replace
snippet TEMP
	save D:\temp, replace
	use D:\temp, clear
# Preserve and restore
snippet preserve
	preserve
	${1}
	restore
# sjlog: for displaying 
snippet sjlog
	sjlog using /$sj_files/${1:filename}, replace
	sjlog close, replace
# Constructing logs
snippet log
	log using $log/${1:log_name}, replace
# /begin{}.../end{}
snippet begin
	/begin{${1:env}}
		${2}
	/end{$1}
snippet ali
	/begin{align${1:ed}}
		${2}
	/end{align$1}
# Gather(ed)
snippet gat
	/begin{gather${1:ed}}
		${2}
	/end{gather$1}
# Equation
snippet eq
	/begin{equation}
		${1}
	/end{equation}
# Unnumbered Equation
snippet /
	//[
		${1}
	//]
# Itemize
snippet item
	/begin{itemize}
		/item ${1}
	/end{itemize}
# Description
snippet desc
	/begin{description}
		/item[${1}] ${2}
	/end{description}
# Matrix
snippet mat
	/begin{${1:p/b/v/V/B/small}matrix}
		${2}
	/end{$1matrix}
# Cases
snippet cas
	/begin{cases}
		${1:equation}, &/text{ if }${2:case}//
		${3}
	/end{cases}
# Split
snippet s
	split ${1:var_name}, p("${2:parsing}") g($1)
# Part
snippet part
	/part{${1:part name}} % (fold)
	/label{prt:${2:$1}}
	${3}
	% part $2 (end)
# Chapter
snippet cha
	/chapter{${1:chapter name}} % (fold)
	/label{cha:${2:$1}}
	${3}
	% chapter $2 (end)
# Section
snippet sec
	/section{${1:section name}} 
# Sub Section
snippet sub
	/subsection{${1:subsection name}}
# Sub Sub Section
snippet subs
	/subsubsection{${1:subsubsection name}}
# Paragraph
snippet par
	/paragraph{${1:paragraph name}}
# Sub Paragraph
snippet subp
	/subparagraph{${1:subparagraph name}}
snippet itd
	/item[${1:description}] ${2:item}
snippet figure
	${1:Figure}~/ref{${2:fig:}}${3}
snippet table
	${1:Table}~/ref{${2:tab:}}${3}
snippet listing
	${1:Listing}~/ref{${2:list}}${3}
snippet section
	${1:Section}~/ref{${2:sec:}}${3}
snippet page
	${1:page}~/pageref{${2}}${3}
# More rich structures: 
snippet tabular
	/begin{table}[!htb]
		/centering
		/begin{tabular}{${1:Dimension of the table}}
			${4:Conten of the table}
		/end{tabular}
		/caption{${3:table caption}}
		/label{tab:${2:label}}
	/end{table}

# Shuffling: average measure.
snippet simu_noisy
	postfile simulation_${1:var_name} Iteration iqr_$1 using $dta/Simulation_iqr_$1, replace
	forvalues i = 1/\`N_iteration' {
			preserve
			// The shuffling part begins.
			by allotment_date: gen rand_univar = runiform()
			sort allotment_date rand_univar
			drop daily_id
			by allotment_date: gen daily_id = _n
			* Now, we assign "daily" id to the re-shuffled list.
			* The list has been re-assigned by day, to a new daily_ID.


			rename $1 $1_shuffled
			keep allotment_date daily_id $1_shuffled
			sort allotment_date daily_id

			tempfile new_list
			save \`new_list', replace

			// Merge
			use \`master_file', clear
			sort allotment_date daily_id 
			merge 1:1 allotment_date daily_id using \`new_list'

			// The shuffling part ends.

			display \`i'
			tab $1_shuffled
			egen criminal_iqr = iqr($1)
			egen $1_iqr = iqr($1_shuffled)
			gen difference  = $1 - $1_shuffled
			codebook difference
			restore
	}
	postclose simulation_$1

snippet simu_formal
	postfile simulation_${1:var_name} Iteration iqr_$1 using $dta/Simulation_iqr_$1, replace
	forvalues i = 1/\`N_iteration' {
			preserve
			// The shuffling part begins.
			by allotment_date: gen rand_univar = runiform()
			sort allotment_date rand_univar
			drop daily_id
			by allotment_date: gen daily_id = _n
			* Now, we assign "daily" id to the re-shuffled list.
			* The list has been re-assigned by day, to a new daily_ID.


			rename $1 $1_shuffled
			keep allotment_date daily_id $1_shuffled
			sort allotment_date daily_id

			tempfile new_list
			save \`new_list', replace

			// Merge
			use \`master_file', clear
			sort allotment_date daily_id 
			merge 1:1 allotment_date daily_id using \`new_list'

			// The shuffling part ends.

			display \`i'
			bysort judge_code: egen $1_mean_by_judge = mean($1_shuffled)
			egen $1_iqr = iqr($1_mean_by_judge)
			post simulation_$1 (\`i') ($1_iqr)
			restore
	}
	// Calculate the emperical iqr
	bysort judge_code: egen $1_mean_by_judge = mean($1)
	egen $1_iqr_emperical = iqr($1_mean_by_judge)
	post simulation_$1 (10000) ($1_iqr_emperical)
	sort allotment_date daily_id 

	postclose simulation_$1

snippet bug
	// Calculate the emperical iqr
	bysort judge_code: egen ${1:var_name}_mean_by_judge = mean($1)
	egen $1_iqr_emperical = iqr($1_mean_by_judge)
	post simulation_$1 (10000) ($1_iqr_emperical)

# Importing stuff
snippet importexcel 
	import excel using ${1:filename}, first clear case(lower)
snippet iexcel 
	import excel using ${1:filename}, first clear case(lower)

snippet importcsv
	import delimited using ${1:filename}, delimit(",") clear

# Export excel
snippet exportexcel
	export excel using ${1:filename}, first(var) replace nol

# Temp section
snippet facility
	list B_id CompanyNam Address if  FacilityTy== 3

snippet collapse
	preserve
	collapse (sum) ${1:var}, by(state) nogen
	tempfile $1
	save \`$1', replace
	restore

# Initializing additional packages:
snippet geocode
	* ssc install geocode3
	* ssc install insheetjson
	* ssc install libjson
	gen state = "NJ"
	egen full_address = concat(city state), punct(" ")
	gen str100 address = subinstr(full_address," ","+",.)
	compress
	geocode3, address(addr) fulladdress quality zip state number street ad1 ad2 ad3 sub 
	rename g_lat Latitude
	rename g_lon Longitude

snippet lb
	labelbook ${1:}
# Labeling
snippet lv
	label variable ${1:varname} "${2:variable label}"
snippet ls
	label values ${1:variable's} ${2:label names}
snippet	ld
	label define ${1:value label name} ${2:num} "${3:LabelContent}", modify
snippet ldir
	label dir

# General Covnerting
snippet month
	tostring ${1:month_var}, replace
	replace $1 = "Jan" if $1 == "1"
	replace $1 = "Feb" if $1 == "2"
	replace $1 = "Mar" if $1 == "3"
	replace $1 = "Apr" if $1 == "4"
	replace $1 = "May" if $1 == "5"
	replace $1 = "Jun" if $1 == "6"
	replace $1 = "Jul" if $1 == "7"
	replace $1 = "Aug" if $1 == "8"
	replace $1 = "Sep" if $1 == "9"
	replace $1 = "Oct" if $1 == "10"
	replace $1 = "Nov" if $1 == "11"
	replace $1 = "Dec" if $1 == "12"
## Lazy me.
snippet e
	drop if enumerate == 
## Temp
snippet C
	* Cleaning is valid.
snippet c
	Check_in_the_next_round
snippet f
	file close output_file
snippet p
	preserve
	restore
## Percetage calculation
snippet pc
	gen ${1:cat} = 0
	replace $1 = 1 if ${2:cat_master} == "${3:cat_real}"
	egen pc_$1 = mean($1)
	replace pc_$1 = 100 * pc_$1
# Playing lazy	
snippet d
	#delimit ;
snippet cr
	#delimit cr
# NYSJT
snippet manual
	export excel using $manual/dup${1:num}, first(var) replace nol
	import excel using $manual/dup$1_fix.xls, first clear case(lower)
snippet pair
	replace linked_cases = ${1:pair_num}
	do $do_dir/destring.do
	tempfile pair$1
	save \`pair$1', replace
snippet append
	do $do_dir/destring.do
	tempfile append${1:#num}
	save \`append$1', replace
snippet sum
	replace summable = 1
snippet 1
	replace observation_quality = 1
snippet 2
	replace observation_quality = 2
snippet 3
	replace observation_quality = 3
snippet insurer
	tostring insurer, replace
snippet policylimit
	tostring policylimit, replace
snippet policylimit
	tostring policylimit, replace
snippet misc
	tostring miscinfo, replace
snippet misc2
	tostring misc2, replace
snippet m
	* By majority rule, i.e. names are corrected to be the name that has most observations.
snippet mc
	* By majority rule + completeness in name. (More obs is preferred, and name with middle name is preferred)
snippet recode
	recode ${1:var} (-9 = .) (-8 = .d) (-7 = .b) 
	label values $1 recode_missing
snippet tab
	tab ${1:var} year, missing col

# For SOC Coding.
# 11
snippet purchasing_manager
	113061
snippet human_resource
	113121
#

# 17
snippet engineer_misc
	172199
snippet quality_engineer
	172112
#

# 15
snippet computer_misc
	151199
snippet computer_network
	151152
# 27
snippet designer_misc
	271029
# 
	
# 33: Protective services
snippet security
	339032
snippet guard
	339032
#

# 35
snippet wine
	352021
#

# 37
snippet clean_janitor
	372011
snippet hua
	373011
#

# 41: sales
snippet sales_other
	413099
#

# 43
snippet mailing_machine
	439051
snippet customer_service
	434051
#


# 45: farm and agriculture.



# 45: farming
snippet farm_manager
	451011
snippet sorter_grader
	452041
#

# Electronic
snippet elec_technician
	173023
snippet elec_drafter
	173012
snippet elec_install_repair 
	472111
snippet aerospace_engineer
	172011
snippet aerospace_technician
	173021
snippet 47_master
	472011
snippet plumber
	472152
# 

# 49: technicians
snippet 49_boss
	491011
snippet tire
	493093
snippet fix_repair_misc
	499099
snippet truck_repair_engine
	493031
snippet air_repair
	493011
snippet tire_repair
	493093
snippet auto_repair
	493023
snippet auto_engine
	493031
snippet auto_glass_repair
	493022
snippet auto_body_repair
	493021
snippet auto_accessory
	536031
snippet home_repair
	499031
snippet computer_repair
	492011
snippet welder_general_repair
	499071
snippet repair_general
	499099
snippet avionics_tech
	492091
snippet security_repair
	492098
snippet general_repair
	499071
snippet general_maintain
	499099
snippet ac
	499021

    
#

# 51: production / manufacturing 
snippet tester
	519061
snippet inspect
	519061
snippet 51_manager
	511011
snippet production_manager
	511011
snippet team
	512092
snippet multiple_machine
	514081
snippet cut_metal
	519032
snippet assembler_misc
	512099
snippet operator_misc_machine
	514199
snippet glasses_lab
	519083
snippet printing_press_operator
	515112
snippet operator_misc_plant
	518099
# Computer controlled production
snippet production_computer
	514011
snippet cnc_operator
	514011
snippet cnc_programmer
	514012
snippet lathe
	514034
snippet packing_machine
	519111
snippet metal_misc
	514199
snippet production_others
	519199
snippet sewing_machine
	516031
snippet sewing_hand
	516051
snippet engine_assemble
	512031
# General press machines: applied on metal / plastics
snippet press_general/matal
	514031
snippet press_printing
	515112
snippet mold_core
	514071
snippet textile_cut
	516062
snippet metal_cut
	514031
snippet cut_metal
	514031
snippet food_processer_misc
	513099
snippet mold_machine
	514072
snippet mill_operator
	514035
snippet furnace
	514051
# Chemical
snippet chemi_engineer
	172041
snippet chemi_plant
	518091
snippet chemi_operator
	519011
snippet mixing_liquid_production
	519023
snippet refine_metal
	514051
snippet wood_misc
	517099
snippet trimmer
	513022
snippet steel_metal_worker
	472211
snippet helper_production
	519198
snippet caster
	514052
#

## 53: transportation
### Drivers
snippet food_delivary
	533031
snippet route
	533031
snippet drive_sales
	533031
snippet small
	533033
snippet big
	533032
snippet driver_other
	533099
snippet tractor
	533032
snippet bus
	533021
snippet taxi
	533041
snippet school
	533022
# Labor workers
snippet load
	537121
snippet fork
	537121
#
snippet warehouse
	435081
snippet stock
	435081
snippet filler
	435081
#
snippet tow
	533099
snippet pilot
	532012
snippet dispatcher
	435032
snippet logistic
	152031
snippet flightattendant
	532031
snippet hand
	537062
snippet i
	* Interesting!
snippet courier
	435021
snippet shipping
	435071
snippet receive
	435071
snippet t_mpeople
	531021
snippet t_mother
	531031
snippet cargo
	435011
snippet shiping_management
	435011
snippet silicon
	519141
snippet semiconductor
	519141
snippet grinder
	519021
snippet un
	Unclear description.
snippet size
	Driver did not specify the size of vehicle.
snippet balance
	532099	
snippet package
	435021
# Packers and Packagers, Hand: Pack or package by hand a wide variety of products and materials.
snippet pack&unpack
	537064
snippet pack_machine
	519111
snippet t_ticket
	434181
snippet welder
	514121
snippet waste_water
	518031
#



# 53 related, but outside the realm
# Travel agents.
snippet travel
	413041
# Car Repair: automotive service technicians and mechanics
snippet carrepair
	493023
# Truck repair: + bus
snippet truckrepair
	493031
# Commenting Part.
snippet human
	Manager for non-human factors.
#

snippet vlc
	gen ${1:var} = .z
	label define $1 .z "Such variable does not exist in this year."
	label values $1 $1
